<<<<<<< HEAD
votes_data <- votes_data$results
is.data.frame(votes_data)
endpoint <- paste0(base_uri, resource, first_id, ".json")
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
personal_data <- fromJSON(content(response, type = "text"))
personal_data <- personal_data$results
personal_data
View(personal_data)
birth
birth <- personal_data$date_of_birth
birth
birth <- as.Date(personal_data$date_of_birth, format = %Y-%m-%d)
birth <- as.Date(personal_data$date_of_birth, format = "%Y-%m-%d")
birth
is.Date(birth)
?is.date
library(lubridate)
?is.date
is.Date(birth)
age <- Sys.Date() - birth
age
age <- (Sys.Date() - birth) / 365
age
age <- new_interval(start = birth, end = Sys.Date() / duration(num = 1, unit = "years"))
curr_date <- Sys.Date
curr_date
curr_date <- Sys.Date()
curr_date
age <- new_interval(start = birth, end = curr_date / duration(num = 1, unit = "years"))
age <- interval(start = birth, end = curr_date / duration(num = 1, unit = "years"))
?interval
age <- interval(start = birth, end = curr_date)
age
?duration
age <- new_interval(start = birth, end = curr_date) / duration(num = 1, units = "years")
age <- interval(start = birth, end = curr_date) / duration(num = 1, units = "years")
age
is.date(age)
is.Date(age)
str(age)
age <- round(interval(start = birth, end = curr_date) / duration(num = 1, units = "years"))
age
age <- round(interval(start = birth, end = curr_date) /
duration(num = 1, units = "years"))
age
twitter_account <- personal_data$twitter_account
twitter_account
View(votes_data)
endpoint <- paste0(base_uri, resource, first_id, "/votes.json")
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
votes_data <- fromJSON(content(response, type = "text"))
votes_data <- votes_data$results
votes_data
View(votes_data)
votes_data <- fromJSON(content(response, type = "text"))
str(votes_data)
votes_data <- votes_data$results$votes
votes_data
is.data.frame(votes_data)
yes_votes <- votes_data["position"]
yes_votes
yes_votes <- votes_data[["position"]]
yes_votes
str(votes_data)
is.data.frame(votes_data)
votes_data$position
votes_data$total
votes_data
votes_data$position
votes_data$total
votes_data <- votes_data$results$votes
votes_data
endpoint <- paste0(base_uri, resource, first_id, "/votes.json")
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
votes_data <- fromJSON(content(response, type = "text"))
votes_data <- votes_data$results$votes
endpoint <- paste0(base_uri, resource, first_id, "/votes.json")
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
votes_data <- fromJSON(content(response, type = "text"))
votes_data <- votes_data$results$votes
votes_data
votes_data["position"]
votes_data <- as.data.frame(votes_data$results$votes)
View(votes_data)
votes_data <- fromJSON(content(response, type = "text"))
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
parsed_data <- fromJSON(content(response, type = "text"))
votes_data <- parsed_data$results$votes
votes_data
votes_data <- as.data.frame(votes_data)
votes_data
votes_data$position
yes_votes <- votes_data %>%
select(position) %>%
filter(position == "Yes")
yes_votes
yes_votes <- votes_data %>%
pull(position) %>%
filter(position == "Yes")
yes_votes <- votes_data %>%
filter(position == "Yes") %>%
pull(position)
yes_votes <- votes_data %>%
filter(position == "Yes") %>%
pull(position)
yes_votes <- votes_data %>%
filter(position == "Yes")
yes_votes <- votes_data %>%
select(position) %>%
filter(position == "Yes")
yes_votes <- nrow(votes_data %>%
select(position) %>%
filter(position == "Yes"))
yes_votes <- nrow(votes_data %>%
select(position) %>%
filter(position == "Yes"))
yes_percentage <- round(yes_votes / 20)
yes_percentage <- round(yes_votes * 100 / 20)
email_not_available <- function(string) {
if(is.null(string)) {
"Not available"
} else {
paste("[", string, "](mailto", string, ")")
}
}
source('~/College/Winter2019/Info201/a6-br1ansho3/civic-info.R', echo=TRUE)
source('~/College/Winter2019/Info201/a6-br1ansho3/civic-info.R', echo=TRUE)
source('~/College/Winter2019/Info201/a6-br1ansho3/civic-info.R', echo=TRUE)
source('~/College/Winter2019/Info201/a6-br1ansho3/civic-info.R', echo=TRUE)
full_name <- paste(personal_data$first_name, personal_data$middle_name, personal_data$last_name)
full_name
full_name <- paste(personal_data$first_name, personal_data$last_name)
full_name
library(lintr)
lint("propublica.R")
lint("propublica.R")
lint("propublica.R")
lint("civic-info.R")
lint("civic-info.R")
lint("civic-info.R")
source('~/College/Winter2019/Info201/a6-br1ansho3/civic-info.R', echo=TRUE)
source('~/College/Winter2019/Info201/a6-br1ansho3/propublica.R', echo=TRUE)
View(members)
party_not_available <- function(string) {
if(is.na(string)) {
"Not available"
} else {
string
}
}
Party <- sapply(joined$party, party_not_available)
source('~/College/Winter2019/Info201/a6-br1ansho3/civic-info.R', echo=TRUE)
else_not_available <- function(string) {
if(is.na(string)) {
"Not available"
} else {
string
}
}
Photo <- sapply(joined$photoUrl, photo_not_available)
Email <- sapply(joined$emails, email_not_available)
Party <- sapply(joined$party, else_not_available)
source('~/College/Winter2019/Info201/a6-br1ansho3/civic-info.R', echo=TRUE)
lint("propublica.R")
lint("civic-info.R")
by_party
by_party$party <- c("Democratics", "Republicans")
by_party
by_party
by_gender
by_gender$gender <- c("Females", "Males")
source('~/College/Winter2019/Info201/a6-br1ansho3/propublica.R', echo=TRUE)
lint("propublica.R")
source('~/College/Winter2019/Info201/a6-br1ansho3/civic-info.R', echo=TRUE)
source('~/College/Winter2019/Info201/a6-br1ansho3/propublica.R', echo=TRUE)
setwd("~/College/Winter2019/Info201/world-data-viz_info201-BE3/scripts")
small_countries_df <- read.csv('data/WDVP Datasets - small countries are beautiful', stringsAsFactors = F)
small_countries_df <- read.csv('data/WDVP Datasets - small countries are beautiful.csv', stringsAsFactors = F)
View(small_countries_df)
#remove first 4 rows
small_countries_df <- small_countries_df[5:nrow(small_countries_df), ]
View(small_countries_df)
small_countries_df[1,]
small_countries_df[1,]
View(small_countries_df)
str(small_countries_df)
colnames(small_countries_df)
?complete.cases
complete.cases(small_countries_df)
small_countries_df <- read.csv('data/WDVP Datasets - small countries are beautiful.csv', stringsAsFactors = F, na.strings = "-")
#remove first 4 rows
small_countries_df <- small_countries_df[5:nrow(small_countries_df), ]
complete.cases(small_countries_df)
complete_rows <- complete.cases(small_countries_df)
complete_small_countries <- small_countries_df[complete_rows, ]
complete_small_countries <- small_countries_df[complete_rows, "indicator"]
#Where are smaller nations innovating
#Are any outlier countries worth our attention?
#Can we learn anything from the trends and patterns of these dataset?
#Do these countries derive power from their agility? Or is innovation more risky?
library(dplyr)
?na.omit
#basic information
#basic_info$feature#max#country/value
find_metadata <- function(df, feature) {
specific_table <- df %>%
select(indicator, feature)
max <- specific_table %>%
filter(feature == max(feature, na.rm = TRUE))
max
#returns the vector of the values of the feature and the country
#returns list max/avg/min with list of country/value
}
find_metadata(small_countries_df, "GDP")
#basic information
#basic_info$feature#max#country/value
find_metadata <- function(df, feature) {
specific_table <- df %>%
select(indicator, feature)
max <- specific_table %>%
filter_(paste0("", feature) == max(paste0("", feature), na.rm = TRUE))
max
#returns the vector of the values of the feature and the country
#returns list max/avg/min with list of country/value
}
find_metadata(small_countries_df, "GDP")
#basic information
#basic_info$feature#max#country/value
find_metadata <- function(df, feature) {
specific_table <- df %>%
select(indicator, feature)
max <- specific_table %>%
filter_(paste0("", feature) == max(paste0("", feature), na.rm = TRUE))
return max
#returns the vector of the values of the feature and the country
#returns list max/avg/min with list of country/value
}
#basic information
#basic_info$feature#max#country/value
find_metadata <- function(df, feature) {
specific_table <- df %>%
select(indicator, feature)
max <- specific_table %>%
filter_(paste0("", feature) == max(paste0("", feature), na.rm = TRUE))
#returns the vector of the values of the feature and the country
#returns list max/avg/min with list of country/value
}
find_metadata(small_countries_df, "GDP")
#basic information
#basic_info$feature#max#country/value
find_metadata <- function(df, feature) {
specific_table <- df %>%
select(indicator, feature)
max <- specific_table %>%
#filter_(paste0("", feature) == max(paste0("", feature), na.rm = TRUE))
filter(feature == max(feature, na.rm = TRUE))
#returns the vector of the values of the feature and the country
#returns list max/avg/min with list of country/value
}
find_metadata(small_countries_df, "GDP")
find_metadata(small_countries_df, "GDP")
hi <- "hi"
hi <- "GDP"
source('~/College/Winter2019/Info201/world-data-viz_info201-BE3/scripts/analysis.R', echo=TRUE)
small_countries_df %>%
select_(hi)
small_countries_df$GDP[[1]]
typeof(small_countries_df$GDP[[1]])
class(small_countries_df$GPD[[1]])
class(small_countries_df$GPD[1])
class(small_countries_df$GPD)
typeof(small_countries_df$GDP[1])
specific_table <- df %>%
select(indicator, hi) %>%
mutate_(hi == gsub(",", "", hi))
specific_table <- df %>%
select_("indicator", hi) %>%
mutate_(hi == gsub(",", "", hi))
#Where are smaller nations innovating
#Are any outlier countries worth our attention?
#Can we learn anything from the trends and patterns of these dataset?
#Do these countries derive power from their agility? Or is innovation more risky?
library(dplyr)
hi <- "GDP"
small_countries_df %>%
select_(hi)
specific_table <- df %>%
select_(hi) %>%
mutate_(hi == gsub(",", "", hi))
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_(hi == gsub(",", "", hi))
specific_table
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_(hi = gsub(",", "", hi))
specific_table
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi))
specific_table
typeof(specific_table$GDP[[1]])
typeof(as.numeric(specific_table$GDP[[1]]))
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = as.numeric(gsub(",", "", hi)))
specific_table
small_countries_df %>%
select_(hi)
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi))
View(specific_table)
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = as.numeric(gsub(",", "", hi)))
?as.numeric
small_countries_df %>%
select_(hi)
specific_table$GDP[[1]]
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi))
specific_table$GDP[[1]]
as.numberic(specific_table$GDP[[1]])
as.numeric(specific_table$GDP[[1]])
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = s.double(gsub(",", "", hi)))
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = as.double(gsub(",", "", hi)))
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi))
specific_table$GDP[1]
?gsub
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_(GDP = gsub(",", "", hi))
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_(GDP = as.numeric(gsub(",", "", hi)))
as.numberic(gsub(",", "", small_countries_df$GDP))
as.numeric(gsub(",", "", small_countries_df$GDP))
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_(GDP = gsub(",", "", hi)) %>%
mutate_(GDP = as.numeric(GDP))
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi)) %>%
mutate_("GDP" = as.numeric("GDP"))
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi))
specific_table$GDP <- as.numeric(specific_table$GDP)
typeof(specific_table$GDP[[1]])
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi))
specific_table$GDP <- as.numeric(specific_table$GDP)
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi))
specific_table$hi <- as.numeric(specific_table$hi)
specific_table[, hi] <- as.numeric(specific_table[ , hi])
View(specific_table)
#basic information
#basic_info$feature#max#country/value
find_metadata <- function(df, feature) {
specific_table <- df %>%
select_("indicator", feature) %>%
mutate_(feature = gsub(",", "", feature))
specific_table[ , feature] <- as.numeric(specific_table[ , hi])
max <- specific_table %>%
filter_(feature == max(feature), na.rm = TRUE))
#returns the vector of the values of the feature and the country
#returns list max/avg/min with list of country/value
}
#basic information
#basic_info$feature#max#country/value
find_metadata <- function(df, feature) {
specific_table <- df %>%
select_("indicator", feature) %>%
mutate_(feature = gsub(",", "", feature))
specific_table[ , feature] <- as.numeric(specific_table[ , hi])
max <- specific_table %>%
filter_(feature == max(feature), na.rm = TRUE)
#returns the vector of the values of the feature and the country
#returns list max/avg/min with list of country/value
}
find_metadata(small_countries_df, "GDP")
#basic information
#basic_info$feature#max#country/value
find_metadata <- function(df, feature) {
specific_table <- df %>%
select_("indicator", feature) %>%
mutate_(feature = gsub(",", "", feature))
specific_table[ , feature] <- as.numeric(specific_table[ , hi])
max <- specific_table %>%
filter_(feature == max(feature, na.rm = TRUE))
#returns the vector of the values of the feature and the country
#returns list max/avg/min with list of country/value
}
find_metadata(small_countries_df, "GDP")
find_metadata(small_countries_df, "GDP")
#basic information
#basic_info$feature#max#country/value
find_metadata <- function(df, feature) {
specific_table <- df %>%
select_("indicator", feature) %>%
mutate_(feature = gsub(",", "", feature))
specific_table[ , feature] <- as.numeric(specific_table[ , feature])
max <- specific_table %>%
filter_(feature == max(feature, na.rm = TRUE))
#returns the vector of the values of the feature and the country
#returns list max/avg/min with list of country/value
}
find_metadata(small_countries_df, "GDP")
#Where are smaller nations innovating
#Are any outlier countries worth our attention?
#Can we learn anything from the trends and patterns of these dataset?
#Do these countries derive power from their agility? Or is innovation more risky?
library(dplyr)
small_countries_df <- read.csv('data/WDVP Datasets - small countries are beautiful.csv', stringsAsFactors = F, na.strings = "-")
#remove first 4 rows
small_countries_df <- small_countries_df[5:nrow(small_countries_df), ]
hi <- "GDP"
small_countries_df %>%
select_(hi)
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi))
specific_table[, hi] <- as.numeric(specific_table[ , hi])
View(specific_table)
max <- specific_table %>%
filter_(hi == max(feature, na.rm = TRUE))
max <- specific_table %>%
filter_(hi == max(hi, na.rm = TRUE))
max <- specific_table %>%
filter_("GDP" == max("GDP", na.rm = TRUE))
max <- specific_table %>%
filter_("GDP" == max(GDP, na.rm = TRUE))
max(specific_table$GDP)
max(specific_table$GDP, na.rm = TRUE)
# comparison
specific_table[, hi] == max(specific_table[, hi], na.rm = TRUE)
# comparison
specific_table[specific_table[, hi] == max(specific_table[, hi], na.rm = TRUE)]
# comparison
specific_table[specific_table[, hi] == max(specific_table[, hi], na.rm = TRUE),]
# comparison
specific_table[na.omit(specific_table[, hi]) == max(specific_table[, hi], na.rm = TRUE),] #has na
filter_(hi == max(hi, na.rm = TRUE))
filter_(specific_table, hi == max(hi, na.rm = TRUE))
filter_(specific_table, hi == paste0("max(", hi, ", na.rm = TRUE)")
filter_(specific_table, hi == paste0("max(", hi, ", na.rm = TRUE)"))
#basic information
#basic_info$feature#max#country/value
find_metadata <- function(df, feature) {
specific_table <- df %>%
select_("indicator", feature) %>%
mutate_(feature = gsub(",", "", feature))
specific_table[ , feature] <- as.numeric(specific_table[ , feature])
max <- specific_table[na.omit(specific_table[, feature]) ==
max(specific_table[, feature], na.rm = TRUE), ]
#returns the vector of the values of the feature and the country
#returns list max/avg/min with list of country/value
}
find_metadata(small_countries_df, "GDP")
print(find_metadata(small_countries_df, "GDP"))
# comparison
specific_table[na.omit(specific_table[, hi]) == max(specific_table[, hi], na.rm = TRUE),]
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi))
specific_table[, hi] <- as.numeric(specific_table[ , hi])
# comparison
specific_table[na.omit(specific_table[, hi]) == max(specific_table[, hi], na.rm = TRUE),]
View(specific_table)
# comparison
specific_table[na.omit(specific_table[, hi]) == max(specific_table[, hi], na.rm = TRUE),]
#Where are smaller nations innovating
#Are any outlier countries worth our attention?
#Can we learn anything from the trends and patterns of these dataset?
#Do these countries derive power from their agility? Or is innovation more risky?
library(dplyr)
small_countries_df <- read.csv('data/WDVP Datasets - small countries are beautiful.csv', stringsAsFactors = F, na.strings = "-")
#remove first 4 rows
small_countries_df <- small_countries_df[5:nrow(small_countries_df), ]
#TESTING AREA
hi <- "GDP"
specific_table <- small_countries_df %>%
select_("indicator", hi) %>%
mutate_("GDP" = gsub(",", "", hi))
specific_table[, hi] <- as.numeric(specific_table[ , hi])
# comparison
specific_table[na.omit(specific_table[, hi]) == max(specific_table[, hi], na.rm = TRUE),]
# comparison
specific_table[na.omit(specific_table[, hi]) == max(specific_table[, hi], na.rm = TRUE)]
# comparison
specific_table[na.omit(specific_table[, hi]) == max(specific_table[, hi], na.rm = TRUE),]
View(specific_table)
# comparison
max(specific_table[, hi], na.rm = TRUE)
# comparison
specific_table[,hi] ==max(specific_table[, hi], na.rm = TRUE)
# comparison
na.omit(specific_table[,hi]) ==max(specific_table[, hi], na.rm = TRUE)
# comparison
specific_table[na.omit(specific_table[,hi]) ==max(specific_table[, hi], na.rm = TRUE),]
=======
license()
q()
1+3
1+1
1+2
cupsofcoffee <- 2
cupsofcoffee * 2
# Coffee Intake
cupsofcoffee <- 2
cupsofcoffee
cupsofcoffee * 2
cupsofcoffee * 2
setwd("~/Desktop/assignments/world-data-viz_info201-BE3")
# Read in csv file for Chart 1
dataframe <- read.csv("WDVP Datasets - small countries are beautiful.csv")
View(dataframe)
library(ggplot2)
library(dplyr)
gdp_area_vs_foreign_born <- function(dataframe) {
ggplot(data = dataframe, mapping = aes(x = GDP.per.km2,
y = X..foreign.born.population))
}
gdp_area_vs_foreign_born(dataframe)
# Read in csv file for Chart 1
small_countries <- read.csv("WDVP Datasets - small countries are beautiful.csv")
View(small_countries)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(data = dataframe_choice, mapping = aes(x = GDP.per.km2,
y = X..foreign.born.population)+
geom_bar(stat = identity))
}
gdp_area_vs_foreign_born(small_countries)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(data = dataframe_choice, mapping = aes(x = GDP.per.km2,
y = X..foreign.born.population)+
geom_bar(stat = "identity"))
}
gdp_area_vs_foreign_born(small_countries)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(data = dataframe_choice, mapping = aes(x = GDP.per.km2,
y = X..foreign.born.population)+
geom_bar(stat = "identity"))
}
gdp_area_vs_foreign_born(small_countries)
View(small_countries)
small_countries_edited <- small_countries[5:76]
small_countries_edited <- small_countries[5:76,]
View(small_countries_edited)
gdp_area_vs_foreign_born(small_countries_edited)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(data = dataframe_choice, mapping = aes(x = GDP.per.km2,
y = X..foreign.born.population) +
geom_bar(stat = "identity"))
}
gdp_area_vs_foreign_born(small_countries_edited)
# Read in csv file for Chart 1
small_countries <- read.csv("data/WDVP Datasets - small countries are beautiful.csv", stringsAsFactors = F)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(data = dataframe_choice, mapping = aes(x = GDP.per.km2,
y = X..foreign.born.population, fill = GDP.per.km2) +
geom_bar(stat = "identity"))
}
gdp_area_vs_foreign_born(small_countries_edited)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(data = dataframe_choice, mapping = aes(x = GDP.per.km2,
y = X..foreign.born.population, fill = GDP.per.km2))
}
gdp_area_vs_foreign_born(small_countries_edited)
small_countries <- read.csv("data/WDVP Datasets - small countries are beautiful.csv", stringsAsFactors = F)
setwd("~/Desktop/assignments/world-data-viz_info201-BE3/scripts")
small_countries <- read.csv("data/WDVP Datasets - small countries are beautiful.csv", stringsAsFactors = F)
small_countries_edited <- small_countries[5:76,]
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(data = dataframe_choice, mapping = aes(x = GDP.per.km2,
y = X..foreign.born.population, fill = GDP.per.km2) +
geom_bar(stat = "identity"))
}
gdp_area_vs_foreign_born(small_countries_edited)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(data = dataframe_choice, mapping = aes(x = GDP.per.km2,
y = X..foreign.born.population) +
geom_point(stat = "identity"))
}
gdp_area_vs_foreign_born(small_countries_edited)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice, aes(x = GDP.per.km2,
y = X..foreign.born.population) +
geom_point(stat = "identity"))
}
gdp_area_vs_foreign_born(small_countries_edited)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice, aes(x = dataframe_choice$GDP.per.km2,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity"))
}
gdp_area_vs_foreign_born(small_countries_edited)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice) + aes(x = dataframe_choice$GDP.per.km2,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity")
}
gdp_area_vs_foreign_born(small_countries_edited)
library(ggplot2)
library(dplyr)
# Read in csv file for Chart 1
small_countries <- read.csv("data/WDVP Datasets - small countries are beautiful.csv", stringsAsFactors = F)
small_countries_edited <- small_countries[5:76,]
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice) + aes(x = dataframe_choice$GDP.per.km2,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity")
}
gdp_area_vs_foreign_born(small_countries_edited)
as.numeric(small_countries_edited)
is.data.frame(small_countries_edited)
is.numeric(small_countries_edited$GDP.per.km2)
as.numeric(small_countries_edited$GDP.per.km2)
test <- lapply(small_countries_edited, as.numeric)
View(test)
as.data.frame(test)
r <- as.data.frame(test)
View(r)
class(small_countries_edited$GDP.per.km2)
class(small_countries_edited$GDP)
for_function <- small_countries_edited %>%
filter(!is.na(indicator), !is.na(GDP.per.km2)) %>%
select(indicator,GDP.per.km2, indicator)
# GDP per km2 vs %foreign born
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice) + aes(x = dataframe_choice$GDP.per.km2,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity")
}
View(for_function)
for_function <- small_countries_edited %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), is.na(X..foreign.born.population)) %>%
select(indicator,GDP.per.km2, indicator)
for_function <- small_countries_edited %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), is.na(X..foreign.born.population)) %>%
select(indicator,GDP.per.km2, indicator)
View(for_function)
for_function <- small_countries_edited %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), is.na(X..foreign.born.population)) %>%
select(indicator,GDP.per.km2, indicator)
for_function <- small_countries_edited %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), is.na(X..foreign.born.population)) %>%
select(indicator, GDP.per.km2, indicator)
for_function <- small_countries_edited %>%
select(indicator, GDP.per.km2, indicator) %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), !is.na(X..foreign.born.population))
for_function <- small_countries_edited %>%
select(indicator, GDP.per.km2, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), !is.na(X..foreign.born.population))
View(for_function)
# Read in csv file for Chart 1
small_countries <- read.csv("data/WDVP Datasets - small countries are beautiful.csv", stringsAsFactors = F, na.strings = "-")
small_countries_edited <- small_countries[5:76,]
for_function <- small_countries_edited %>%
select(indicator, GDP.per.km2, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), !is.na(X..foreign.born.population))
View(for_function)
for_function <- small_countries_edited %>%
select(indicator, GDP.per.km2, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), !is.na(X..foreign.born.population)) %>%
as.numeric()
for_function <- small_countries_edited %>%
select(indicator, GDP.per.km2, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), !is.na(X..foreign.born.population)) %>%
mutate(indicator = as.numeric(indicator))
for_function <- small_countries_edited %>%
select(indicator, GDP.per.km2, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), !is.na(X..foreign.born.population)) %>%
mutate(indicator = as.numeric(GDP.per.km2))
for_function <- small_countries_edited %>%
select(indicator, GDP.per.km2, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), !is.na(X..foreign.born.population)) %>%
mutate(GDP.per.km2 = as.numeric(GDP.per.km2))
for_function <- small_countries_edited %>%
select(indicator, GDP.per.km2, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), !is.na(X..foreign.born.population)) %>%
mutate(GDP.per.km2 = as.numeric(as.character(GDP.per.km2)))
for_function <- small_countries_edited %>%
select(indicator, GDP.per.km2, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP.per.km2), !is.na(X..foreign.born.population))
lapply(for_function, as.numeric)
test <- lapply(for_function, as.numeric)
testb <- lapply(for_function, as.numeric)
View(testb)
for_function <- small_countries_edited %>%
select(indicator, GDP.per.km2, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP), !is.na(X..foreign.born.population))
for_function <- small_countries_edited %>%
select(indicator, GDP, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP), !is.na(X..foreign.born.population))
View(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice) + aes(x = dataframe_choice$GDP.per.km2,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity")
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice) + aes(x = dataframe_choice$GDP,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity")
}
gdp_area_vs_foreign_born(for_function)
for_function <- small_countries_edited %>%
select(indicator, GDP, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP), !is.na(X..foreign.born.population)) %>%
mutate(GDP = as.numeric(as.character(GDP)),
X..foreign.born.population = as.numeric(as.character(X..foreign.born.population)))
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice) + aes(x = dataframe_choice$GDP,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity")
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice) + aes(x = dataframe_choice$GDP,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity") +
labs(title="GDP of Small Countries vs. the Foreign Born Population",
x="GDP (Billions of $)", y = "% Foriegn Born Population")
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice) + aes(x = dataframe_choice$GDP,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity") +
labs(title="GDP of Small Countries vs. their Foreign Born Population",
x="GDP (Billions of $)", y = "% Foriegn Born Population") +
scale_color_manual(value = #0066CC)
}
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice) + aes(x = dataframe_choice$GDP,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity") +
labs(title="GDP of Small Countries vs. their Foreign Born Population",
x="GDP (Billions of $)", y = "% Foriegn Born Population") +
scale_colour_manual(values = c("blue"))
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
ggplot(dataframe_choice) + aes(x = dataframe_choice$GDP,
y = dataframe_choice$X..foreign.born.population) +
geom_point(stat = "identity") +
labs(title="GDP of Small Countries vs. their Foreign Born Population",
x="GDP (Billions of $)", y = "% Foriegn Born Population") +
scale_colour_manual(values = c("#0066CC"))
}
gdp_area_vs_foreign_born(for_function)
library(plotly)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population,
text = dataframe_choice$indicator)
labs(title="GDP of Small Countries vs. their Foreign Born Population",
x="GDP (Billions of $)", y = "% Foriegn Born Population") +
scale_colour_manual(values = c("#0066CC"))
}
gdp_area_vs_foreign_born(for_function)
for_function <- small_countries_edited %>%
select(indicator, GDP, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP), !is.na(X..foreign.born.population)) %>%
mutate(GDP = as.numeric(as.character(GDP)),
X..foreign.born.population = as.numeric(as.character(X..foreign.born.population)))
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population,
text = dataframe_choice$indicator)
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = ~dataframe_choice$GDP, y = ~dataframe_choice$X..foreign.born.population,
text = dataframe_choice$indicator,
layout(title = "GDP of Small Countries vs. their Foreign Born Population"))
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = ~dataframe_choice$GDP, y = ~dataframe_choice$X..foreign.born.population,
text = dataframe_choice$indicator,
layout(title = "GDP of Small Countries vs. their Foreign Born Population"))
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population,
text = dataframe_choice$indicator,
color = dataframe_choice$GDP,
layout(title = "GDP of Small Countries vs. their Foreign Born Population"))
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population,
add_markers(hoverinfo = dataframe_choice$indicator,
color = ~dataframe_choice$GDP, size = ~dataframe_choice$GDP),
layout(title = "GDP of Small Countries vs. their Foreign Born Population"))
}
gdp_area_vs_foreign_born(for_function)
for_function <- small_countries_edited %>%
select(indicator, GDP, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP), !is.na(X..foreign.born.population)) %>%
mutate(GDP = as.numeric(as.character(GDP)),
X..foreign.born.population = as.numeric(as.character(X..foreign.born.population)))
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population,
add_markers(hoverinfo = dataframe_choice$indicator,
color = ~dataframe_choice$GDP, size = ~dataframe_choice$GDP),
layout(title = "GDP of Small Countries vs. their Foreign Born Population"))
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population) %>%
add_markers(hoverinfo = dataframe_choice$indicator,
color = ~dataframe_choice$GDP, size = ~dataframe_choice$GDP) %>%
layout(title = "GDP of Small Countries vs. their Foreign Born Population")
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population) %>%
add_markers(text = dataframe_choice$indicator,
color = ~dataframe_choice$GDP, size = ~dataframe_choice$GDP) %>%
layout(title = "GDP of Small Countries vs. their Foreign Born Population")
}
gdp_area_vs_foreign_born(for_function)
View(gdp_area_vs_foreign_born(for_function))
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population,
text = dataframe_choice$indicator)
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population,
text = dataframe_choice$indicator)
}
gdp_area_vs_foreign_born(for_function)
library(ggplot2)
library(dplyr)
library(plotly)
# Read in csv file for Chart 1
small_countries <- read.csv("data/WDVP Datasets - small countries are beautiful.csv", stringsAsFactors = F, na.strings = "-")
small_countries_edited <- small_countries[5:76,]
for_function <- small_countries_edited %>%
select(indicator, GDP, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP), !is.na(X..foreign.born.population)) %>%
mutate(GDP = as.numeric(as.character(GDP)),
X..foreign.born.population = as.numeric(as.character(X..foreign.born.population)))
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population,
text = dataframe_choice$indicator)
}
gdp_area_vs_foreign_born(for_function)
library(ggplot2)
library(dplyr)
library(plotly)
# Read in csv file for Chart 1
small_countries <- read.csv("data/WDVP Datasets - small countries are beautiful.csv", stringsAsFactors = F, na.strings = "-")
small_countries_edited <- small_countries[5:76,]
for_function <- small_countries_edited %>%
select(indicator, GDP, X..foreign.born.population) %>%
filter(!is.na(indicator), !is.na(GDP), !is.na(X..foreign.born.population)) %>%
mutate(GDP = as.numeric(as.character(GDP)),
X..foreign.born.population = as.numeric(as.character(X..foreign.born.population)))
# GDP per km2 vs %foreign born
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = dataframe_choice$GDP, y = dataframe_choice$X..foreign.born.population,
text = dataframe_choice$indicator)
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = ~dataframe_choice$GDP, y = ~dataframe_choice$X..foreign.born.population,
text = dataframe_choice$indicator)
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = ~dataframe_choice$GDP, y = ~dataframe_choice$X..foreign.born.population,
text = ~dataframe_choice$indicator)
}
gdp_area_vs_foreign_born(for_function)
gdp_area_vs_foreign_born <- function(dataframe_choice) {
plot_ly(dataframe_choice, x = ~GDP, y = ~X..foreign.born.population,
text = ~indicator)
}
gdp_area_vs_foreign_born(for_function)
View(gdp_area_vs_foreign_born)
View(gdp_area_vs_foreign_born)
View(gdp_area_vs_foreign_born)
p <- plot_ly(for_function, x = ~GDP, y = ~X..foreign.born.population,
text = ~indicator)
p <- plot_ly(
data = for_function, x = ~GDP, y = ~X..foreign.born.population)
p <- plot_ly(data = for_function, x = ~GDP, y = ~X..foreign.born.population)
plot_ly(data = for_function, x = ~GDP, y = ~X..foreign.born.population)
plot_ly(data = for_function, x = ~GDP, y = ~X..foreign.born.population)
View(for_function)
View(r)
View(for_function)
>>>>>>> b22f9629472d9b8c82059095917ebd9682a77018
